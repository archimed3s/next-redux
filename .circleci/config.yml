version: 2
jobs:
  build:
    docker:
      - image: circleci/node:12

    working_directory: ~/dp-dashboard

    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-package-json-{{ checksum "package.json" }}
      - run:
          name: Install dependencies, creaete coverage statistic, generate documentation, compile server and client
          command: |
            npm start
      - save_cache:
          key: v1-package-json-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Lint code
          command: |
            npm run lint
      - run:
          name: Run Tests
          command: |
            npm run test
      - run:
          name: Remove dev dependencies
          command: |
            npm prune --production
      - run:
          name: Bundle dist
          command: |
            zip -r dp-dashboard.zip .ebextensions dist node_modules package.json src/client/static src/client/next.config.js
      - persist_to_workspace:
          root: .
          paths:
            - dp-dashboard.zip

  beanstalk_publish:
    working_directory: ~/dp-dashboard
    docker:
      - image: circleci/python
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Setup image
          command: |
            pip install --user awscli
            ~/.local/bin/aws configure set default.region eu-west-1
            ~/.local/bin/aws s3 cp s3://drc-aws-tools/drc-aws-tools-2.1.1.tar.gz /tmp/
            pip install --user --upgrade /tmp/drc-aws-tools-2.1.1.tar.gz

      - run:
          name: Publish beanstalk artifacts
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              staging_config_template=`jq -n -f ./config/staging.template.json --arg version "${CIRCLE_SHA1}" --arg TEST_AUTH_0_SERVER_CLIENT_ID "${TEST_AUTH_0_SERVER_CLIENT_ID}" --arg TEST_AUTH_0_SERVER_CLIENT_SECRET "${TEST_AUTH_0_SERVER_CLIENT_SECRET}"`
              prod_config_template=`jq -n -f ./config/prod.template.json --arg version "${CIRCLE_SHA1}" --arg PROD_AUTH_0_SERVER_CLIENT_ID "${PROD_AUTH_0_SERVER_CLIENT_ID}" --arg PROD_AUTH_0_SERVER_CLIENT_SECRET "${PROD_AUTH_0_SERVER_CLIENT_SECRET}"`
              ~/.local/bin/ElasticBeanstalkPublish --application-name dp-dashboard \
                --version ${CIRCLE_SHA1} \
                --path-to-source-bundle /tmp/workspace/dp-dashboard.zip \
                --staging-config "${staging_config_template}" \
                --prod-config "${prod_config_template}"
            fi

  staging_infrastructure:
    working_directory: ~/dp-dashboard
    docker:
      - image: circleci/python
    steps:
      - checkout
      - run:
          name: Setup AWS CLI
          command: |
            pip install --user awscli
            ~/.local/bin/aws configure set default.region eu-west-1
      - run:
          name: Get deploy script
          command: |
            ~/.local/bin/aws s3 cp s3://drc-aws-tools/drc-aws-tools-2.1.1.tar.gz /tmp/
            pip install --user --upgrade /tmp/drc-aws-tools-2.1.1.tar.gz
      - run:
          name: Cloudformation Deploy
          command: |
            ~/.local/bin/CloudformationDeploy STAGING-dp-dashboard config/config.yml config/staging.json ${CIRCLE_SHA1} STAGING Fulfilment

  staging_deploy:
    working_directory: ~/dp-dashboard
    docker:
      - image: circleci/python
    steps:
      - run:
          name: Configure AWS CLI
          command: |
            pip install --user awscli
            ~/.local/bin/aws configure set default.region eu-west-1
      - run:
          name: Download and prepare deploy script
          command: |
            ~/.local/bin/aws s3 cp s3://drc-aws-tools/drc-aws-tools-2.1.1.tar.gz /tmp/
            pip install --user --upgrade /tmp/drc-aws-tools-2.1.1.tar.gz
      - run:
          name: Deploy application (blue/green)
          command: |
            ARGS="dp-dashboard $CIRCLE_SHA1 STAGING CostCentre=Fulfilment --blue-green-enabled"
            echo "ARGS=${ARGS}"
            ~/.local/bin/ElasticBeanstalkDeploy ${ARGS}

  prod_infrastructure:
    working_directory: ~/dp-dashboard
    docker:
      - image: circleci/python
    steps:
      - checkout
      - run:
          name: Configure AWS CLI
          command: |
            pip install --user awscli
            ~/.local/bin/aws configure set default.region eu-west-1
      - run:
          name: Download and prepare deploy script
          command: |
            ~/.local/bin/aws s3 cp s3://drc-aws-tools/drc-aws-tools-2.1.1.tar.gz /tmp/
            pip install --user --upgrade /tmp/drc-aws-tools-2.1.1.tar.gz
      - run:
          name: Deploy infrastructure
          command: |
            ~/.local/bin/CloudformationDeploy PROD-dp-dashboard config/config.yml config/prod.json ${CIRCLE_SHA1} PROD Fulfilment

  prod_deploy:
    working_directory: ~/dp-dashboard
    docker:
      - image: circleci/python
    steps:
      - run:
          name: Configure AWS CLI
          command: |
            pip install --user awscli
            ~/.local/bin/aws configure set default.region eu-west-1
      - run:
          name: Download and prepare deploy script
          command: |
            ~/.local/bin/aws s3 cp s3://drc-aws-tools/drc-aws-tools-2.1.1.tar.gz /tmp/
            pip install --user --upgrade /tmp/drc-aws-tools-2.1.1.tar.gz
      - run:
          name: Deploy application (blue/green)
          command: |
            ARGS="dp-dashboard $CIRCLE_SHA1 PROD CostCentre=Fulfilment --blue-green-enabled"
            echo "ARGS=${ARGS}"
            ~/.local/bin/ElasticBeanstalkDeploy ${ARGS}

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - beanstalk_publish:
          context: master-account-deployment
          requires:
            - build
          filters:
            branches:
              only: master
      - staging_infrastructure:
          context: master-account-deployment
          filters:
            branches:
              only: master
      - staging_deploy:
          context: master-account-deployment
          requires:
            - beanstalk_publish
            - staging_infrastructure
      - staging_approval:
          type: approval
          requires:
            - staging_deploy
      - prod_infrastructure:
          context: master-account-deployment
          requires:
            - staging_approval
      - prod_deploy:
          context: master-account-deployment
          requires:
            - staging_approval
            - prod_infrastructure